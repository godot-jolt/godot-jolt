name: ðŸ“¦ Package

on:
  push:
    tags:
      - v\d+.\d+.\d+-\w+
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  windows:
    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86]

    name: Build (windows-${{ matrix.arch }})

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment
        uses: ./.github/actions/setup-windows
        with:
          arch: ${{ matrix.arch }}

      - name: Configure
        uses: ./.github/actions/cmake-configure
        with:
          platform: windows-clangcl
          arch: ${{ matrix.arch }}
          args: >
            -DCMAKE_INSTALL_PREFIX=dist
            -DGDJ_INSTALL_DEBUG_SYMBOLS=TRUE
        env:
          CXXFLAGS: /clang:-fmacro-prefix-map=${{ github.workspace }}=.

      - name: Build (non-editor)
        uses: ./.github/actions/cmake-build
        with:
          platform: windows-clangcl
          arch: ${{ matrix.arch }}
          editor: false
          config: distribution

      - name: Build (editor)
        uses: ./.github/actions/cmake-build
        with:
          platform: windows-clangcl
          arch: ${{ matrix.arch }}
          editor: true
          config: distribution

      - name: Upload builds
        uses: actions/upload-artifact@v3
        with:
          name: windows-${{ matrix.arch }}
          path: ./dist/**
          retention-days: 1

  linux:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86]

    name: Build (linux-${{ matrix.arch }})

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment
        uses: ./.github/actions/setup-linux
        with:
          toolchain: llvm

      - name: List dynamic dependencies
        run: ldd --version

      - name: Configure
        uses: ./.github/actions/cmake-configure
        with:
          platform: linux-clang
          arch: ${{ matrix.arch }}
          args: >
            -DCMAKE_INSTALL_PREFIX=dist
            -DGDJ_INSTALL_DEBUG_SYMBOLS=TRUE
        env:
          CXXFLAGS: -fmacro-prefix-map=${{ github.workspace }}=.

      - name: Build (non-editor)
        uses: ./.github/actions/cmake-build
        with:
          platform: linux-clang
          arch: ${{ matrix.arch }}
          editor: false
          config: distribution

      - name: Build (editor)
        uses: ./.github/actions/cmake-build
        with:
          platform: linux-clang
          arch: ${{ matrix.arch }}
          editor: true
          config: distribution

      - name: Upload builds
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ matrix.arch }}
          path: ./dist/**
          retention-days: 1

  macos:
    runs-on: macos-13

    name: Build (macos)

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment
        uses: ./.github/actions/setup-macos

      - name: Configure
        uses: ./.github/actions/cmake-configure
        with:
          platform: macos-clang
          args: >
            -DCMAKE_INSTALL_PREFIX=tmp
            -DGDJ_INSTALL_DEBUG_SYMBOLS=TRUE
        env:
          CXXFLAGS: -fmacro-prefix-map=${{ github.workspace }}=.

      - name: Build (non-editor)
        uses: ./.github/actions/cmake-build
        with:
          platform: macos-clang
          editor: false
          config: distribution

      - name: Build (editor)
        uses: ./.github/actions/cmake-build
        with:
          platform: macos-clang
          editor: true
          config: distribution

      # HACK(mihe): Framework bundles contain symlinks to help with supporting multiple versions in
      # a bundle. This can result in multiple physical duplicates of the bundled library when we do
      # things like zip them, push them to source control or just deal with them in general on
      # platforms that don't do well with symlinks, like Windows. So to mitigate this we replace the
      # symlinks with the actual files and remove any duplicates.
      - name: Remove symbolic links
        run: >
          rsync ./tmp/ ./dist
          --archive
          --copy-links
          --exclude="*/Versions/"

      - name: Sign frameworks
        shell: pwsh
        env:
          APPLE_CERT_BASE64: ${{ secrets.APPLE_CERT_BASE64 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_DEV_ID: ${{ secrets.APPLE_DEV_ID }}
          APPLE_DEV_TEAM_ID: ${{ secrets.APPLE_DEV_TEAM_ID }}
          APPLE_DEV_PASSWORD: ${{ secrets.APPLE_DEV_PASSWORD }}
        run: gci -R ./dist/*.framework | ./scripts/ci_sign_macos.ps1

      - name: Upload builds
        uses: actions/upload-artifact@v3
        with:
          name: macos
          path: ./dist/**
          retention-days: 1

  upload:
    runs-on: ubuntu-20.04
    needs: [windows, linux, macos]

    name: Upload

    steps:
      - name: Download builds (windows-x64)
        uses: actions/download-artifact@v3
        with:
          name: windows-x64
          path: ./dist

      - name: Download builds (windows-x86)
        uses: actions/download-artifact@v3
        with:
          name: windows-x86
          path: ./dist

      - name: Download builds (linux-x64)
        uses: actions/download-artifact@v3
        with:
          name: linux-x64
          path: ./dist

      - name: Download builds (linux-x86)
        uses: actions/download-artifact@v3
        with:
          name: linux-x86
          path: ./dist

      - name: Download builds (macos)
        uses: actions/download-artifact@v3
        with:
          name: macos
          path: ./dist

      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            windows-x64
            windows-x86
            linux-x64
            linux-x86
            macos

      - name: Separate debug symbols
        run: >
          rsync ./dist/./ ./symbols
          --archive
          --relative
          --remove-source-files
          --include="*/"
          --include="*.pdb"
          --include="*.debug"
          --include="*.dSYM/**"
          --exclude="*"

      - name: Delete empty directories
        run: find . -type d -empty -delete

      - name: Upload builds
        uses: actions/upload-artifact@v3
        with:
          name: godot-jolt_${{ github.ref_name }}
          path: ./dist/**
          retention-days: 1

      - name: Upload debug symbols
        uses: actions/upload-artifact@v3
        with:
          name: godot-jolt_${{ github.ref_name }}_symbols
          path: ./symbols/**
          retention-days: 1
