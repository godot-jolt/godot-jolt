---
# Requires LLVM 20.1

# The checks are split it into 4 groups:
#
# 1. Globs
# 2. General
# 3. C++ Standard Library
# 4. Exception handling
#
# The checks in the last two are grouped solely for the sake of being able to easily enable them if
# there ever was a need in the future.

Checks: >
  -abseil-*,
  -altera-*,
  -android-*,
  -boost-*,
  -cert-*,
  -clang-analyzer-*,
  -darwin-*,
  -fuchsia-*,
  -google-*,
  -linuxkernel-*,
  -llvm-*,
  -llvmlibc-*,
  -mpi-*,
  -objc-*,
  -openmp-*,
  -zircon-*,

  -bugprone-argument-comment,
  bugprone-assert-side-effect,
  -bugprone-assignment-in-if-condition,
  -bugprone-bad-signal-to-kill-thread,
  bugprone-bitwise-pointer-cast,
  bugprone-bool-pointer-implicit-conversion,
  -bugprone-branch-clone,
  bugprone-casting-through-void,
  bugprone-chained-comparison,
  bugprone-compare-pointer-to-member-virtual-function,
  bugprone-copy-constructor-init,
  bugprone-crtp-constructor-accessibility,
  bugprone-dangling-handle,
  bugprone-dynamic-static-initializers,
  -bugprone-easily-swappable-parameters,
  bugprone-fold-init-type,
  bugprone-forward-declaration-namespace,
  bugprone-forwarding-reference-overload,
  bugprone-implicit-widening-of-multiplication-result,
  bugprone-inc-dec-in-conditions,
  bugprone-incorrect-enable-if,
  bugprone-incorrect-roundings,
  bugprone-infinite-loop,
  bugprone-integer-division,
  bugprone-lambda-function-name,
  bugprone-macro-parentheses,
  bugprone-macro-repeated-side-effects,
  bugprone-misplaced-operator-in-strlen-in-alloc,
  bugprone-misplaced-pointer-arithmetic-in-alloc,
  bugprone-misplaced-widening-cast,
  bugprone-move-forwarding-reference,
  bugprone-multi-level-implicit-pointer-conversion,
  bugprone-multiple-new-in-one-expression,
  bugprone-multiple-statement-macro,
  bugprone-narrowing-conversions,
  -bugprone-no-escape,
  bugprone-non-zero-enum-to-bool-conversion,
  bugprone-nondeterministic-pointer-iteration-order,
  bugprone-not-null-terminated-result,
  bugprone-parent-virtual-call,
  bugprone-pointer-arithmetic-on-polymorphic-object,
  -bugprone-posix-return,
  bugprone-redundant-branch-condition,
  -bugprone-reserved-identifier,
  bugprone-return-const-ref-from-parameter,
  -bugprone-signal-handler,
  bugprone-signed-char-misuse,
  bugprone-sizeof-expression,
  -bugprone-spuriously-wake-up-functions,
  bugprone-string-literal-with-embedded-nul,
  bugprone-suspicious-enum-usage,
  bugprone-suspicious-include,
  bugprone-suspicious-memory-comparison,
  bugprone-suspicious-memset-usage,
  bugprone-suspicious-missing-comma,
  bugprone-suspicious-realloc-usage,
  bugprone-suspicious-semicolon,
  bugprone-suspicious-string-compare,
  bugprone-swapped-arguments,
  -bugprone-switch-missing-default-case,
  -bugprone-tagged-union-member-count,
  bugprone-terminating-continue,
  bugprone-too-small-loop-variable,
  bugprone-undefined-memory-manipulation,
  bugprone-undelegated-constructor,
  bugprone-unhandled-self-assignment,
  bugprone-unsafe-functions,
  bugprone-unused-raii,
  bugprone-unused-return-value,
  bugprone-use-after-move,
  -bugprone-virtual-near-miss,
  -clang-diagnostic-pragma-once-outside-header,
  concurrency-mt-unsafe,
  -concurrency-thread-canceltype-asynchronous,
  -cppcoreguidelines-avoid-capturing-lambda-coroutines,
  -cppcoreguidelines-avoid-const-or-ref-data-members,
  -cppcoreguidelines-avoid-do-while,
  cppcoreguidelines-avoid-goto,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -cppcoreguidelines-avoid-reference-coroutine-parameters,
  cppcoreguidelines-init-variables,
  cppcoreguidelines-interfaces-global-init,
  -cppcoreguidelines-macro-usage,
  cppcoreguidelines-misleading-capture-default-by-value,
  cppcoreguidelines-missing-std-forward,
  cppcoreguidelines-narrowing-conversions,
  -cppcoreguidelines-no-malloc,
  -cppcoreguidelines-no-suspend-with-lock,
  -cppcoreguidelines-owning-memory,
  cppcoreguidelines-prefer-member-initializer,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -cppcoreguidelines-pro-bounds-constant-array-index,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  cppcoreguidelines-pro-type-const-cast,
  cppcoreguidelines-pro-type-cstyle-cast,
  cppcoreguidelines-pro-type-member-init,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-pro-type-static-cast-downcast,
  -cppcoreguidelines-pro-type-union-access,
  -cppcoreguidelines-pro-type-vararg,
  cppcoreguidelines-rvalue-reference-param-not-moved,
  cppcoreguidelines-slicing,
  -cppcoreguidelines-special-member-functions,
  cppcoreguidelines-virtual-class-destructor,
  hicpp-explicit-conversions,
  hicpp-ignored-remove-result,
  hicpp-multiway-paths-covered,
  hicpp-no-assembler,
  hicpp-signed-bitwise,
  -misc-confusable-identifiers,
  -misc-const-correctness,
  -misc-coroutine-hostile-raii,
  misc-definitions-in-headers,
  misc-header-include-cycle,
  -misc-include-cleaner,
  misc-misleading-bidirectional,
  misc-misleading-identifier,
  misc-misplaced-const,
  misc-new-delete-overloads,
  -misc-no-recursion,
  misc-non-copyable-objects,
  -misc-non-private-member-variables-in-classes,
  misc-redundant-expression,
  misc-static-assert,
  misc-unconventional-assign-operator,
  misc-unused-alias-decls,
  misc-unused-parameters,
  -misc-unused-using-decls,
  misc-use-anonymous-namespace,
  misc-use-internal-linkage,
  modernize-concat-nested-namespaces,
  modernize-deprecated-headers,
  modernize-loop-convert,
  modernize-macro-to-enum,
  modernize-pass-by-value,
  modernize-raw-string-literal,
  modernize-redundant-void-arg,
  modernize-replace-disallow-copy-and-assign-macro,
  modernize-return-braced-init-list,
  modernize-type-traits,
  modernize-unary-static-assert,
  modernize-use-auto,
  modernize-use-bool-literals,
  -modernize-use-constraints,
  modernize-use-default-member-init,
  -modernize-use-designated-initializers,
  modernize-use-equals-default,
  modernize-use-equals-delete,
  -modernize-use-integer-sign-comparison,
  -modernize-use-nodiscard,
  modernize-use-nullptr,
  modernize-use-override,
  -modernize-use-trailing-return-type,
  modernize-use-using,
  -performance-enum-size,
  performance-for-range-copy,
  performance-implicit-conversion-in-loop,
  performance-move-const-arg,
  performance-move-constructor-init,
  performance-no-automatic-move,
  -performance-no-int-to-ptr,
  -performance-noexcept-destructor,
  performance-noexcept-move-constructor,
  -performance-noexcept-swap,
  performance-trivially-destructible,
  performance-type-promotion-in-math-fn,
  performance-unnecessary-copy-initialization,
  performance-unnecessary-value-param,
  portability-restrict-system-includes,
  -portability-simd-intrinsics,
  -portability-template-virtual-member-function,
  readability-avoid-const-params-in-decls,
  -readability-avoid-nested-conditional-operator,
  readability-avoid-return-with-void-value,
  readability-avoid-unconditional-preprocessor-if,
  readability-braces-around-statements,
  readability-const-return-type,
  -readability-convert-member-functions-to-static,
  readability-delete-null-pointer,
  readability-duplicate-include,
  -readability-else-after-return,
  readability-enum-initial-value,
  -readability-function-cognitive-complexity,
  -readability-function-size,
  -readability-identifier-length,
  readability-identifier-naming,
  readability-implicit-bool-conversion,
  readability-inconsistent-declaration-parameter-name,
  readability-isolate-declaration,
  -readability-magic-numbers,
  readability-make-member-function-const,
  -readability-math-missing-parentheses,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  readability-named-parameter,
  readability-non-const-parameter,
  -readability-operators-representation,
  readability-qualified-auto,
  readability-redundant-access-specifiers,
  readability-redundant-casting,
  readability-redundant-control-flow,
  readability-redundant-declaration,
  readability-redundant-function-ptr-dereference,
  readability-redundant-inline-specifier,
  readability-redundant-member-init,
  readability-redundant-preprocessor,
  readability-reference-to-constructed-temporary,
  readability-simplify-boolean-expr,
  readability-static-accessed-through-instance,
  readability-static-definition-in-anonymous-namespace,
  -readability-suspicious-call-argument,
  readability-uppercase-literal-suffix,

  bugprone-inaccurate-erase,
  -bugprone-optional-value-conversion,
  -bugprone-shared-ptr-array-mismatch,
  bugprone-sizeof-container,
  -bugprone-standalone-empty,
  bugprone-string-constructor,
  bugprone-string-integer-assignment,
  -bugprone-incorrect-enable-shared-from-this,
  -bugprone-stringview-nullptr,
  -bugprone-suspicious-stringview-data-usage,
  -bugprone-unchecked-optional-access,
  -bugprone-unique-ptr-array-mismatch,
  -bugprone-unused-local-non-trivial-variable,
  -misc-uniqueptr-reset-release,
  modernize-avoid-bind,
  -modernize-avoid-c-arrays,
  -modernize-deprecated-ios-base-aliases,
  -modernize-make-shared,
  -modernize-make-unique,
  -modernize-min-max-use-initializer-list,
  -modernize-replace-auto-ptr,
  modernize-replace-random-shuffle,
  modernize-shrink-to-fit,
  -modernize-use-emplace,
  -modernize-use-ranges,
  -modernize-use-starts-ends-with,
  -modernize-use-std-format,
  -modernize-use-std-numbers,
  -modernize-use-std-print,
  modernize-use-transparent-functors,
  -performance-avoid-endl,
  performance-faster-string-find,
  performance-inefficient-algorithm,
  performance-inefficient-string-concatenation,
  performance-inefficient-vector-operation,
  portability-std-allocator-const,
  -readability-container-contains,
  readability-container-data-pointer,
  readability-container-size-empty,
  -readability-redundant-smartptr-get,
  readability-redundant-string-cstr,
  readability-redundant-string-init,
  readability-simplify-subscript-expr,
  readability-string-compare,
  -readability-uniqueptr-delete-release,
  -readability-use-anyofallof,
  -readability-use-std-min-max,

  -bugprone-empty-catch,
  -bugprone-exception-escape,
  -bugprone-throw-keyword-missing,
  -bugprone-unhandled-exception-at-new,
  -hicpp-exception-baseclass,
  -misc-throw-by-value-catch-by-reference,
  -modernize-use-noexcept,
  -modernize-use-uncaught-exceptions,

# Aliases to already included checks:
#
# ⚠️ Keep in mind that aliases can have different CheckOptions defaults.
#
# cppcoreguidelines-avoid-c-arrays
# cppcoreguidelines-avoid-magic-numbers
# cppcoreguidelines-c-copy-assignment-signature
# cppcoreguidelines-explicit-virtual-functions
# cppcoreguidelines-macro-to-enum
# cppcoreguidelines-noexcept-destructor
# cppcoreguidelines-noexcept-move-operations
# cppcoreguidelines-noexcept-swap
# cppcoreguidelines-non-private-member-variables-in-classes
# cppcoreguidelines-use-default-member-init
# hicpp-avoid-c-arrays
# hicpp-avoid-goto
# hicpp-braces-around-statements
# hicpp-deprecated-headers
# hicpp-function-size
# hicpp-invalid-access-moved
# hicpp-member-init
# hicpp-move-const-arg
# hicpp-named-parameter
# hicpp-new-delete-operators
# hicpp-no-array-decay
# hicpp-no-malloc
# hicpp-noexcept-move
# hicpp-special-member-functions
# hicpp-static-assert
# hicpp-undelegated-constructor
# hicpp-uppercase-literal-suffix
# hicpp-use-auto
# hicpp-use-emplace
# hicpp-use-equals-default
# hicpp-use-equals-delete
# hicpp-use-noexcept
# hicpp-use-nullptr
# hicpp-use-override
# hicpp-vararg

CheckOptions:
  bugprone-narrowing-conversions.PedanticMode: true
  bugprone-narrowing-conversions.WarnWithinTemplateInstantiation: true
  cppcoreguidelines-narrowing-conversions.PedanticMode: true
  cppcoreguidelines-pro-type-member-init.IgnoreArrays: true
  cppcoreguidelines-pro-type-member-init.UseAssignment: true
  cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor: true
  misc-unused-parameters.StrictMode: true
  modernize-deprecated-headers.CheckHeaderFile: true
  modernize-use-auto.MinTypeNameLength: 0
  modernize-use-default-member-init.UseAssignment: true
  readability-identifier-naming.AggressiveDependentMemberLookup: true
  readability-identifier-naming.ClassCase: CamelCase
  readability-identifier-naming.EnumCase: CamelCase
  readability-identifier-naming.EnumConstantCase: UPPER_CASE
  readability-identifier-naming.FunctionCase: lower_case
  readability-identifier-naming.GetConfigPerFile: false
  readability-identifier-naming.GlobalConstantCase: UPPER_CASE
  readability-identifier-naming.MacroDefinitionCase: UPPER_CASE
  readability-identifier-naming.MemberCase: lower_case
  readability-identifier-naming.NamespaceCase: lower_case
  readability-identifier-naming.ParameterCase: lower_case
  readability-identifier-naming.ParameterPrefix: p_
  readability-identifier-naming.PrivateMethodPrefix: _
  readability-identifier-naming.ProtectedMethodPrefix: _
  readability-identifier-naming.ScopedEnumConstantCase: UPPER_CASE
  readability-identifier-naming.TemplateParameterCase: CamelCase
  readability-identifier-naming.TemplateParameterPrefix: T
  readability-identifier-naming.TypeAliasCase: CamelCase
  readability-identifier-naming.TypedefCase: CamelCase
  readability-identifier-naming.UnionCase: CamelCase
  readability-identifier-naming.VariableCase: lower_case
  readability-inconsistent-declaration-parameter-name.Strict: true
  readability-simplify-boolean-expr.ChainedConditionalAssignment: true
  readability-simplify-boolean-expr.ChainedConditionalReturn: true
  readability-simplify-boolean-expr.SimplifyDeMorganRelaxed: true
  readability-uppercase-literal-suffix.NewSuffixes: L;LL;U;UL;ULL;f

WarningsAsErrors: '*'
HeaderFilterRegex: src/.+
...
